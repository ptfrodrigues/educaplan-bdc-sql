CREATE TABLE IF NOT EXISTS Roles (
    Role_ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS Users (
    User_ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Password VARCHAR(255) NOT NULL,
    Role_ID INT,
    last_login DATETIME,
    FOREIGN KEY (Role_ID) REFERENCES Roles(Role_ID) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Entities (
    Entity_ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Type VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS Courses (
    Course_ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Description TEXT,
    Entity_ID INT,
    FOREIGN KEY (Entity_ID) REFERENCES Entities(Entity_ID) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Modules (
    Module_ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Description TEXT,
    Course_ID INT,
    FOREIGN KEY (Course_ID) REFERENCES Courses(Course_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Topics (
    Topic_ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Description TEXT,
    Module_ID INT,
    FOREIGN KEY (Module_ID) REFERENCES Modules(Module_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Materials (
    Material_ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Type VARCHAR(50) NOT NULL,
    URL VARCHAR(255),
    Topic_ID INT,
    FOREIGN KEY (Topic_ID) REFERENCES Topics(Topic_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Sessions (
    Session_ID INT PRIMARY KEY AUTO_INCREMENT,
    Date_Time DATETIME NOT NULL,
    Duration INT NOT NULL,
    Module_ID INT,
    FOREIGN KEY (Module_ID) REFERENCES Modules(Module_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Users_Courses (
    User_ID INT,
    Course_ID INT,
    Enrollment_Date DATE NOT NULL,
    PRIMARY KEY (User_ID, Course_ID),
    FOREIGN KEY (User_ID) REFERENCES Users(User_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Course_ID) REFERENCES Courses(Course_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Students (
    Student_ID INT PRIMARY KEY,
    Student_Number VARCHAR(20) UNIQUE,
    FOREIGN KEY (Student_ID) REFERENCES Users(User_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Attendance (
    Attendance_ID INT PRIMARY KEY AUTO_INCREMENT,
    Student_ID INT,
    Session_ID INT,
    Status VARCHAR(20) NOT NULL,
    FOREIGN KEY (Student_ID) REFERENCES Students(Student_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Session_ID) REFERENCES Sessions(Session_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Feedback (
    Feedback_ID INT PRIMARY KEY AUTO_INCREMENT,
    Student_ID INT,
    Module_ID INT,
    Comment TEXT,
    Rating INT,
    Feedback_Date DATE NOT NULL,
    FOREIGN KEY (Student_ID) REFERENCES Students(Student_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Module_ID) REFERENCES Modules(Module_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Progress (
    Progress_ID INT PRIMARY KEY AUTO_INCREMENT,
    Student_ID INT,
    Module_ID INT,
    Completion_Percentage DECIMAL(5,2) NOT NULL,
    Last_Updated DATE NOT NULL,
    FOREIGN KEY (Student_ID) REFERENCES Students(Student_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Module_ID) REFERENCES Modules(Module_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Grades (
    Grade_ID INT PRIMARY KEY AUTO_INCREMENT,
    Student_ID INT,
    Module_ID INT,
    Grade DECIMAL(5,2) NOT NULL,
    Assessment_Date DATE NOT NULL,
    FOREIGN KEY (Student_ID) REFERENCES Students(Student_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Module_ID) REFERENCES Modules(Module_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS UserLoginLog (
    Log_ID INT PRIMARY KEY AUTO_INCREMENT,
    User_ID INT,
    Login_Time DATETIME,
    FOREIGN KEY (User_ID) REFERENCES Users(User_ID)
);

CREATE TABLE IF NOT EXISTS CourseEnrollmentLog (
    Log_ID INT PRIMARY KEY AUTO_INCREMENT,
    User_ID INT,
    Course_ID INT,
    Enrollment_Date DATE,
    FOREIGN KEY (User_ID) REFERENCES Users(User_ID),
    FOREIGN KEY (Course_ID) REFERENCES Courses(Course_ID)
);


INSERT IGNORE INTO Roles (Role_ID, Name) VALUES
(1, 'Administrator'),
(2, 'Teacher'),
(3, 'Student');

INSERT IGNORE INTO Users (User_ID, Name, Email, Password, Role_ID)
VALUES 
(1, 'superuser', 'superuser@educaplan.com', 'superuser123', 1),
(2, 'Admin', 'admin@educaplan.com', 'admin123', 1);